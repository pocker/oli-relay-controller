substitutions:
  name: "oli-relay-controller"
  friendly_name: "Fűtés relé vezérlő"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  on_boot:
    priority: 600
    then:
      - lambda: |-
          // Force initial relay state update based on active profile and inputs
          bool t1_state = id(t1).state;
          bool t2_state = id(t2).state;
          bool t3_state = id(t3).state;
          bool t4_state = id(t4).state;
          
          // Call the update_relays script to apply the correct states
          id(update_relays).execute(t1_state, t2_state, t3_state, t4_state);

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable web server and OTA updates
web_server:
  port: 80
  auth:
    username: admin
    password: admin

# Enable OTA updates
ota:
 - platform: esphome
   password: "ea313f6fff79ec0bab75de625e2665a0"

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "0HRMbYKLzk/UGurzEWyIchFVllOLfO9WKdUvRzqSHDw="

wifi:
  # WiFi credentials
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_password
  power_save_mode: none
  manual_ip:    
    static_ip: 192.168.1.81    
    gateway: 192.168.1.20    
    subnet: 255.255.255.0
    dns1: 192.168.1.20
    dns2: 8.8.8.8
  
  # Enable fallback hotspot (captive portal) if WiFi connection fails
  ap:
    ssid: 'relay-controller-ap'
    password: 'relay-controller-pass'
    
# WiFi signal strength sensor
sensor:
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s
    entity_category: diagnostic

  - platform: uptime
    name: Uptime raw
    id: uptime_raw
    internal: true

text_sensor:
  - platform: wifi_info    
    ip_address:
      name: "IP"
      icon: "mdi:ip-outline"
      update_interval: 60s
      entity_category: diagnostic
    ssid:
      name: "SSID"
      icon: "mdi:wifi-settings"
      update_interval: 60s
      entity_category: diagnostic
    bssid:
      name: "BSSID"
      icon: "mdi:wifi-settings"
      update_interval: 60s
      entity_category: diagnostic
    mac_address:
      name: "MAC"
      icon: "mdi:network-outline"
      entity_category: diagnostic
    scan_results:
      name: "Wifi Scan"
      icon: "mdi:wifi-refresh"
      entity_category: diagnostic
  - platform: template
    name: Uptime
    update_interval: 60s
    entity_category: diagnostic
    lambda: |-
      int seconds = id(uptime_raw).state;
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      char hour_str[3];
      sprintf(hour_str, "%02d", hours);
      return to_string(days) + "d " + hour_str + "h " + to_string(minutes) + "m";
        

# Define the binary inputs (with inverted logic since original uses active LOW)
binary_sensor:
  # Home Assistant connection status sensor
  - platform: status
    name: "Connection"
    id: connection_status
    entity_category: diagnostic
  
  - platform: gpio
    pin: GPIO21
    name: "Input T1"
    icon: "mdi:thermostat"
    id: t1
    filters:
      - invert:      
      - delayed_off: 500ms    

  - platform: gpio
    pin: GPIO19
    name: "Input T2"
    icon: "mdi:thermostat"
    id: t2
    filters:
      - invert:      
      - delayed_off: 500ms    

  - platform: gpio
    pin: GPIO18
    name: "Input T3"
    icon: "mdi:thermostat"
    id: t3
    filters:
      - invert:      
      - delayed_off: 500ms    


# Define the relay outputs
switch:
  - platform: gpio
    pin: 22
    name: "Relay K1"
    id: k1
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin: 17
    name: "Relay K2"
    id: k2
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin: 16
    name: "Relay K3"
    id: k3
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: "Input T4"
    icon: "mdi:thermostat"
    id: t4
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

# Define a restart button
button:
  - platform: restart
    name: "Restart"

# Define global variables
globals:
  - id: active_profile
    type: int
    initial_value: '0'
    restore_value: true
  
  # Previous states for debouncing
  - id: prev_t1_state
    type: bool
    initial_value: 'false'
    restore_value: true
  - id: prev_t2_state
    type: bool
    initial_value: 'false'
    restore_value: true
  - id: prev_t3_state
    type: bool
    initial_value: 'false'
    restore_value: true
  - id: prev_t4_state
    type: bool
    initial_value: 'false'
    restore_value: true

# Select component for profile switching
select:
  - platform: template
    name: "Active Profile"
    id: profile_selector
    options:
      - "Profile 0 (Hold)"
      - "Profile 1 (Bypass)"
      - "Profile 2 (Config)"
    initial_option: "Profile 0 (Hold)"
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: |-
            if (x == "Profile 0 (Hold)") {
              id(active_profile) = 0;
            } else if (x == "Profile 1 (Bypass)") {
              id(active_profile) = 1;
            } else {
              id(active_profile) = 2;
            }

# Automation to handle relay control based on inputs and active profile
interval:
  - interval: 500ms
    then:
      - lambda: |-
          // ===== Input State Reading =====
          // Read current state of all inputs
          // Note: true = input active, false = input inactive
          bool t1_state = id(t1).state;
          bool t2_state = id(t2).state;
          bool t3_state = id(t3).state;
          bool t4_state = id(t4).state;
          
          // Check if states have changed
          bool states_changed = (t1_state != id(prev_t1_state)) || 
                              (t2_state != id(prev_t2_state)) || 
                              (t3_state != id(prev_t3_state)) || 
                              (t4_state != id(prev_t4_state));
          
          // Update previous states
          id(prev_t1_state) = t1_state;
          id(prev_t2_state) = t2_state;
          id(prev_t3_state) = t3_state;
          id(prev_t4_state) = t4_state;
          
          // For Profile 0 (Hold), never update based on inputs
          if (id(active_profile) == 0) {
            return;
          }
          
          // For Profiles 1 & 2, only update if states have changed
          if ((id(active_profile) == 1 || id(active_profile) == 2) && !states_changed) {
            return;
          }
          
          // Call the update_relays script with current states
          id(update_relays).execute(t1_state, t2_state, t3_state, t4_state);

# Define a helper script to update relays based on inputs and active profile
script:
  - id: update_relays
    mode: restart
    parameters:
      t1_state: bool
      t2_state: bool
      t3_state: bool
      t4_state: bool
    then:
      - lambda: |-
          // Process relays based on active profile
          switch (id(active_profile)) {
            case 0:
              // Profile 0 (Hold) - Do nothing, maintain current relay states
              break;
              
            case 1:
              // Profile 1 (Bypass) - Direct input to output mapping
              if (t1_state) id(k1).turn_on(); else id(k1).turn_off();
              if (t2_state) id(k2).turn_on(); else id(k2).turn_off();
              if (t3_state) id(k3).turn_on(); else id(k3).turn_off();
              break;
              
            case 2:
              // Profile 2 (Config) - Hardcoded behavior
              // K1: T1 active, T2 ignore, T3 ignore
              if (t1_state && true && true) {
                id(k1).turn_on();
              } else {
                id(k1).turn_off();
              }
              
              // K2: T1 active, T2 ignore, T3 ignore
              if (t1_state && true && true) {
                id(k2).turn_on();
              } else {
                id(k2).turn_off();
              }
              
              // K3: T1 active, T2 ignore, T3 active OR if T3/T4 is active
              if (t1_state && true && (t3_state || t4_state)) {
                id(k3).turn_on();
              } else {
                id(k3).turn_off();
              }
              break;
          }
